#Tarea 1 Zuraya Huizar
#Tiene los puntos extra

class Array:
    "Una clase minima para algebra lineal"
    def __init__(self, list_of_rows):
    #Validador de tamaño 
        "Constructor y validador"
        self.data = list_of_rows
        nrow=len(list_of_rows)
        if not isinstance(list_of_rows[0],list):
            nrow=1
            self.data=[[x] for x in list_of_rows]
        ncol=len(self.data[0])        
        self.shape = (nrow, ncol)
        if any([len(r)!=ncol for r in self.data]):
            raise Exception("Las filas deben ser del mismo tamaño")
        
        

    def __repr__(self):
        if self.shape[0]==1:
            self.m="array(["+str(self.data[0])+"])"
        else:
            for x in range(0,len(self.data)):
                if x==0:
                    self.m="array(["+str(self.data[0])+","+"\n"
                elif x==len(self.data)-1:
                    self.m=self.m+"       "+str(self.data[x])+"])"
                else:
                    self.m=self.m+"       "+str(self.data[x])+","+"\n"
        return(self.m)
    
    def __str__(self):
        if self.shape[0]==1:
            self.m="["+str(self.data[0])+"]"
        else:
            for x in range(0,len(self.data)):
                if x==0:
                    self.m="["+str(self.data[0])+"\n" 
                elif x==len(self.data)-1:
                    self.m=self.m+" "+str(self.data[x])+"]"
                else:
                    self.m=self.m+" "+str(self.data[x])+"\n"
        return(self.m)

    def __getitem__(self, idx):
        return self.data[idx[0]][idx[1]]
    
    def __setitem__(self, idx, new_value):
        self.data[idx[0]][idx[1]]=new_value
        
    def zeros(shape):
        A=Array([[0 for i in range(shape[1])] for j in range(shape[0])])
        return A
    
    def eye(n):
        A=Array([[0 for i in range(n)] for j in range(n)])
        for i in range(n):
            A[i,i]=1
        return A
    
    def transpose(self):
        A=Array(self)
        B=Array.zeros(A.shape)
        for i in range (A.shape[1]):
            for j in range (A.shape[1]):
                B[i,j]=A[j,i]
        return B
    
    def __add__(self, other):
        if isinstance(other, Array):
            if self.shape != other.shape:
                raise Exception("Las dimensiones son distintas!")
            rows, cols = self.shape
            newArray = Array([[0. for c in range(cols)] for r in range(rows)])
            for r in range(rows):
                for c in range(cols):
                    newArray.data[r][c] = self.data[r][c] + other.data[r][c]
            return newArray
        elif isinstance(2, (int, float, complex)): # en caso de que el lado derecho sea solo un numero
            rows, cols = self.shape
            newArray = Array([[0. for c in range(cols)] for r in range(rows)])
            for r in range(rows):
                for c in range(cols):
                    newArray.data[r][c] = self.data[r][c] + other
            return newArray
        else:
            return NotImplemented
        
    def __radd__(self, other):
        if isinstance(1, (int, float, complex)):
            return Array.__add__(self,other)

        
    def __sub__(self, other):
        if isinstance(other, Array):
            if self.shape != other.shape:
                raise Exception("Las dimensiones son distintas!")
            rows, cols = self.shape
            newArray = Array([[0. for c in range(cols)] for r in range(rows)])
            for r in range(rows):
                for c in range(cols):
                    newArray.data[r][c] = self.data[r][c] - other.data[r][c]
            return newArray
        elif isinstance(2, (int, float, complex)): # en caso de que el lado derecho sea solo un numero
            rows, cols = self.shape
            newArray = Array([[0. for c in range(cols)] for r in range(rows)])
            for r in range(rows):
                for c in range(cols):
                    newArray.data[r][c] = self.data[r][c] - other
            return newArray
        else:
            return NotImplemented        
        
    def __rsub__(self, other):
        rows, cols = self.shape
        newArray = Array([[0. for c in range(cols)] for r in range(rows)])
        for r in range(rows):
            for c in range(cols):
                newArray.data[r][c] = other - self.data[r][c]
        return newArray
    
    
    def __mul__(self, other):
        if isinstance(other, Vector):
            if self.shape[1] != other.shape[0]:
                raise Exception("Error de concordancia!")
            rows, cols = self.shape 
            newArray = Array([0.  for r in range(rows)])
            for r in range(rows):
                newArray.data[r][0]= sum(self.data[r][i] * other.data[i][0] for i in range(cols))         
            return "Vector(" + str(newArray.data) + ")"            
        elif isinstance(other, Array):
            if self.shape[1] != other.shape[0]:
                raise Exception("Error de concordancia!")
            rows= self.shape[0]
            cols= other.shape[1] 
            newArray = Array([[0. for c in range(cols)] for r in range(rows)])
            for r in range(rows):
                for c in range(cols):
                    newArray.data[r][c]= sum(self.data[r][i] * other.data[i][c] for i in range(cols))         
            return newArray
        elif isinstance(2, (int, float, complex)): # en caso de que el lado derecho sea solo un numero
            rows, cols = self.shape
            newArray = Array([[0. for c in range(cols)] for r in range(rows)])
            for r in range(rows):
                for c in range(cols):
                    newArray.data[r][c] = self.data[r][c] * other
            return newArray
        else:
            return NotImplemented
        
    def __rmul__(self, other):
        if isinstance(1, (int, float, complex)):
            return Array.__mul__(self,other)
    
    def forward_subs(self, other):
        if self.shape[0]== other.shape[0]:
            rows, cols = self.shape
            cero=0
            for r in range(0, rows):
                for c in range(r+1, cols):
                    cero+=self.data[r][c]
                if cero==0:
                    newArray = Array([[0. for c in range(1)] for r in range(rows)])
                    for  r in range (rows):
                        if r==0:
                            newArray.data[0][0]=(other.data[0][0]/self.data[0][0])
                        else:
                            suma=0
                            suma=sum(newArray.data[i][0]*self.data[r][i] for i in range(cols-1))
                            newArray.data[r][0]=((other.data[r][0]-suma)/self.data[r][r])
                    return newArray
                else:
                    raise Exception("La matriz no es triangular inferior!")
        else:
            raise Exception("Error de concordancia!")

    def backward_subs(self, other):
        if self.shape[0]== other.shape[0]:
            rows, cols=self.shape
            cero=0
            for r in range(1, rows):
                for c in range(0, r):
                    cero+=self.data[r][c]
            if cero==0:
                newArray = Array([[0. for c in range(1)] for r in range(rows)])
                for r in range(rows-1, -1, -1):
                    if r==rows-1:
                        newArray.data[r][0]=(other.data[r][0]/self.data[r][r])
                    else:
                        suma=0
                        suma=sum(newArray.data[i][0]*self.data[r][i] for i in range(cols-1, -1, -1))
                        newArray.data[r][0]=((other.data[r][0]-suma)/self.data[r][r])
                return newArray
            else:
                raise Exception("La matriz no es triangular superior!")
        else:
            raise Exception("Error de concordancia!")
    
    def LU(self):
        if self.shape[0]== self.shape[1]:
            rows, cols=self.shape
            U=self
            L=Array.zeros((rows,cols))
            for r in range(rows):
                    L[r,cols-r-1]=1
            P=Array.eye(rows)
            
            for c in range(cols):
                mx=0
                rpiv=0
                f=0
                u=U
                l=L
                p=P
                for r in range(rows):
                    while r>c:
                        if A[r,c]>mx:
                            mx=A[r,c]
                            rpiv=r
                if A[rpiv,c]!=0:
                    for i in range(cols):
                        U[c,i]=u[rpiv,i]
                        U[rpiv,i]=u[c,i]
                        L[c,i]=l[rpiv,i]
                        L[rpiv,i]=l[c,i]
                        P[c,i]=p[rpiv,i]
                        P[rpiv,i]=p[c,i]
                    print("rpiv=",str(rpiv))
                    f=-(U[c+1,c]/U[c,c])
                    L[c+1,c]=f
                    for j in range(rows):
                        for k in range(cols):
                            U[j,k]=U[j,k]+f*U[j-1,k]       
                else:
                    pass
            return U
            
            
        else:
            raise Exception("La matriz no es cuadrada!")
            
        
class Vector(Array): # declara que Vector es un tipo de Array
    def __init__(self, list_of_numbers):
        self.vdata = list_of_numbers
        list_of_rows = [[x] for x in list_of_numbers]
        return Array.__init__(self, list_of_rows)
    def __repr__(self):
        return "Vector(" + str(self.vdata) + ")"
    def __str__(self):
        return str(self.vdata)
    def __add__(self, other):
        new_arr = Array.__add__(self, other)
        return Vector([x[0] for x in new_arr.data])
    def __mul__(self, other):
        if self.shape[1] != other.shape[0]:
                raise Exception("Error de concordancia!")
        rows= self.shape[0]
        cols= other.shape[1] 
        newArray = Array([[0. for c in range(cols)] for r in range(rows)])
        for r in range(rows):
            for c in range(cols):
                newArray.data[r][c]= self.data[r][0] * other.data[0][c]
        return newArray
